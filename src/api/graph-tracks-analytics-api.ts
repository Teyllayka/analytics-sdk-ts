/* tslint:disable */
/* eslint-disable */
/**
 * GraphTracks Analytics API
 * Analytics API for GraphTracks
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GetGlobalStatsForAccountAPI403Response } from '../model';
// @ts-ignore
import type { Metric } from '../model';
// @ts-ignore
import type { Network } from '../model';
// @ts-ignore
import type { StatsInner } from '../model';
// @ts-ignore
import type { Timeframe } from '../model';
/**
 * GraphTracksAnalyticsApi - axios parameter creator
 * @export
 */
export const GraphTracksAnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get global stats for an account. Authentication can be via JWT or an X-API-Key header.
         * @summary Get global stats for an account
         * @param {Network} network The network to get stats for
         * @param {string} accountId The account id to get stats for
         * @param {Metric} metric The metric to get stats for
         * @param {string} from The start date of the timeframe
         * @param {Timeframe} [timeframe] The timeframe to get stats for
         * @param {string} [to] The end date of the timeframe
         * @param {string} [bucket] bucket size. Interval in seconds between data points
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobalStatsForAccountAPI: async (network: Network, accountId: string, metric: Metric, from: string, timeframe?: Timeframe, to?: string, bucket?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'network' is not null or undefined
            assertParamExists('getGlobalStatsForAccountAPI', 'network', network)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getGlobalStatsForAccountAPI', 'accountId', accountId)
            // verify required parameter 'metric' is not null or undefined
            assertParamExists('getGlobalStatsForAccountAPI', 'metric', metric)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getGlobalStatsForAccountAPI', 'from', from)
            const localVarPath = `/v1/api/networks/{network}/accounts/{account_id}/stats/{metric}`
                .replace(`{${"network"}}`, encodeURIComponent(String(network)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"metric"}}`, encodeURIComponent(String(metric)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (timeframe !== undefined) {
                localVarQueryParameter['timeframe'] = timeframe;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (bucket !== undefined) {
                localVarQueryParameter['bucket'] = bucket;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GraphTracksAnalyticsApi - functional programming interface
 * @export
 */
export const GraphTracksAnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GraphTracksAnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get global stats for an account. Authentication can be via JWT or an X-API-Key header.
         * @summary Get global stats for an account
         * @param {Network} network The network to get stats for
         * @param {string} accountId The account id to get stats for
         * @param {Metric} metric The metric to get stats for
         * @param {string} from The start date of the timeframe
         * @param {Timeframe} [timeframe] The timeframe to get stats for
         * @param {string} [to] The end date of the timeframe
         * @param {string} [bucket] bucket size. Interval in seconds between data points
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGlobalStatsForAccountAPI(network: Network, accountId: string, metric: Metric, from: string, timeframe?: Timeframe, to?: string, bucket?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StatsInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalStatsForAccountAPI(network, accountId, metric, from, timeframe, to, bucket, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GraphTracksAnalyticsApi.getGlobalStatsForAccountAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GraphTracksAnalyticsApi - factory interface
 * @export
 */
export const GraphTracksAnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GraphTracksAnalyticsApiFp(configuration)
    return {
        /**
         * Get global stats for an account. Authentication can be via JWT or an X-API-Key header.
         * @summary Get global stats for an account
         * @param {GraphTracksAnalyticsApiGetGlobalStatsForAccountAPIRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobalStatsForAccountAPI(requestParameters: GraphTracksAnalyticsApiGetGlobalStatsForAccountAPIRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<StatsInner>> {
            return localVarFp.getGlobalStatsForAccountAPI(requestParameters.network, requestParameters.accountId, requestParameters.metric, requestParameters.from, requestParameters.timeframe, requestParameters.to, requestParameters.bucket, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GraphTracksAnalyticsApi - interface
 * @export
 * @interface GraphTracksAnalyticsApi
 */
export interface GraphTracksAnalyticsApiInterface {
    /**
     * Get global stats for an account. Authentication can be via JWT or an X-API-Key header.
     * @summary Get global stats for an account
     * @param {GraphTracksAnalyticsApiGetGlobalStatsForAccountAPIRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphTracksAnalyticsApiInterface
     */
    getGlobalStatsForAccountAPI(requestParameters: GraphTracksAnalyticsApiGetGlobalStatsForAccountAPIRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<StatsInner>>;

}

/**
 * Request parameters for getGlobalStatsForAccountAPI operation in GraphTracksAnalyticsApi.
 * @export
 * @interface GraphTracksAnalyticsApiGetGlobalStatsForAccountAPIRequest
 */
export interface GraphTracksAnalyticsApiGetGlobalStatsForAccountAPIRequest {
    /**
     * The network to get stats for
     * @type {Network}
     * @memberof GraphTracksAnalyticsApiGetGlobalStatsForAccountAPI
     */
    readonly network: Network

    /**
     * The account id to get stats for
     * @type {string}
     * @memberof GraphTracksAnalyticsApiGetGlobalStatsForAccountAPI
     */
    readonly accountId: string

    /**
     * The metric to get stats for
     * @type {Metric}
     * @memberof GraphTracksAnalyticsApiGetGlobalStatsForAccountAPI
     */
    readonly metric: Metric

    /**
     * The start date of the timeframe
     * @type {string}
     * @memberof GraphTracksAnalyticsApiGetGlobalStatsForAccountAPI
     */
    readonly from: string

    /**
     * The timeframe to get stats for
     * @type {Timeframe}
     * @memberof GraphTracksAnalyticsApiGetGlobalStatsForAccountAPI
     */
    readonly timeframe?: Timeframe

    /**
     * The end date of the timeframe
     * @type {string}
     * @memberof GraphTracksAnalyticsApiGetGlobalStatsForAccountAPI
     */
    readonly to?: string

    /**
     * bucket size. Interval in seconds between data points
     * @type {string}
     * @memberof GraphTracksAnalyticsApiGetGlobalStatsForAccountAPI
     */
    readonly bucket?: string
}

/**
 * GraphTracksAnalyticsApi - object-oriented interface
 * @export
 * @class GraphTracksAnalyticsApi
 * @extends {BaseAPI}
 */
export class GraphTracksAnalyticsApi extends BaseAPI implements GraphTracksAnalyticsApiInterface {
    /**
     * Get global stats for an account. Authentication can be via JWT or an X-API-Key header.
     * @summary Get global stats for an account
     * @param {GraphTracksAnalyticsApiGetGlobalStatsForAccountAPIRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphTracksAnalyticsApi
     */
    public getGlobalStatsForAccountAPI(requestParameters: GraphTracksAnalyticsApiGetGlobalStatsForAccountAPIRequest, options?: RawAxiosRequestConfig) {
        return GraphTracksAnalyticsApiFp(this.configuration).getGlobalStatsForAccountAPI(requestParameters.network, requestParameters.accountId, requestParameters.metric, requestParameters.from, requestParameters.timeframe, requestParameters.to, requestParameters.bucket, options).then((request) => request(this.axios, this.basePath));
    }
}

